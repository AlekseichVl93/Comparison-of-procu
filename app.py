# app.py
import os
import sys
import tempfile
import traceback
import gradio as gr
from excel_summary_script import build_summary_table

# ---------- –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º stdout/stderr –≤ —Ñ–∞–π–ª ----------
sys.stdout = open("log.txt", "w")
sys.stderr = sys.stdout


# ---------- helpers ----------
def _path_from(file_obj):
    """–î–æ—Å—Ç–∞—ë–º –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É (Gradio v4 –º–æ–∂–µ—Ç –æ—Ç–¥–∞–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç/dict/—Å–ø–∏—Å–æ–∫)."""
    if not file_obj:
        return None
    if isinstance(file_obj, (list, tuple)) and file_obj:
        file_obj = file_obj[0]
    if isinstance(file_obj, dict):
        return file_obj.get("path") or file_obj.get("name")
    return getattr(file_obj, "path", None) or getattr(file_obj, "name", None)


# ---------- handlers ----------
def keep_file(file_obj):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ state –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è."""
    path = _path_from(file_obj)
    if not path:
        print("[warn] —Ñ–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω")
        return None, "–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω"
    print(f"[ok] –≤—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {path}")
    return file_obj, f"–§–∞–π–ª: **{os.path.basename(path)}**"

def make_summary(file_obj):
    """–§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º (–∫–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è, —Å—Ç–∞—Ç—É—Å)."""
    path = _path_from(file_obj)
    print(f"[info] –∑–∞–ø—É—Å–∫–∞–µ–º —Å–≤–æ–¥ –¥–ª—è: {path}")

    if not path:
        return gr.update(visible=False), "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ .xlsx"

    try:
        wb = build_summary_table(path)
        fd, out_path = tempfile.mkstemp(suffix=".xlsx")
        os.close(fd)
        wb.save(out_path)
        print(f"[ok] –∏—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {out_path}")
        return gr.update(visible=True, value=out_path), "‚úÖ –ì–æ—Ç–æ–≤–æ! –°–∫–∞—á–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç."
    except Exception as e:
        tb = traceback.format_exc()
        print(f"[ERR] {tb}")
        return gr.update(visible=False), f"‚ùå –û—à–∏–±–∫–∞: {e}"


# ---------- UI ----------
CSS = """
.gradio-container { max-width: 820px !important; margin: 0 auto !important; }
#controls { gap: 12px; }
"""

with gr.Blocks(css=CSS, title="–°–≤–æ–¥ –ö–ü") as demo:
    gr.Markdown("## üìä –°–≤–æ–¥ –ö–ü\n–®–∞–≥ 1 ‚Äî **–≤—ã–±–µ—Ä–∏—Ç–µ Excel (.xlsx)**. –®–∞–≥ 2 ‚Äî **–Ω–∞–∂–º–∏—Ç–µ ¬´–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–¥¬ª**.")

    file_state = gr.State(None)

    # –¥–≤–µ –∫–Ω–æ–ø–∫–∏
    with gr.Row(elem_id="controls"):
        choose_btn = gr.UploadButton("üìÅ –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª (.xlsx)", file_types=[".xlsx"], file_count="single")
        run_btn = gr.Button("üöÄ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–¥", variant="primary")

    file_info = gr.Markdown("–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω")
    download_btn = gr.DownloadButton("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", visible=False)
    status = gr.Textbox(label="–°—Ç–∞—Ç—É—Å", lines=2, interactive=False)

    choose_btn.upload(fn=keep_file, inputs=choose_btn, outputs=[file_state, file_info])
    run_btn.click(fn=make_summary, inputs=file_state, outputs=[download_btn, status])


if __name__ == "__main__":
    demo.launch()
