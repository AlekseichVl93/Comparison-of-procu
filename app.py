# app.py
import os
import tempfile
import gradio as gr
from excel_summary_script import build_summary_table

# ---------- helpers ----------
def _extract_path(file_obj):
    """–î–æ—Å—Ç–∞—ë–º –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–∑ UploadButton/State (—É—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã Gradio v4)."""
    if not file_obj:
        return None
    # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –ø—Ä–∏—à—ë–ª —Å–ø–∏—Å–æ–∫ ‚Äî –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π
    if isinstance(file_obj, (list, tuple)) and file_obj:
        file_obj = file_obj[0]
    # dict {"name": "...", "path": "..."} –∏–ª–∏ –æ–±—ä–µ–∫—Ç —Å .path / .name
    if isinstance(file_obj, dict):
        return file_obj.get("path") or file_obj.get("name")
    return getattr(file_obj, "path", None) or getattr(file_obj, "name", None)

def _display_name(file_obj):
    p = _extract_path(file_obj)
    if not p:
        return "–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω"
    return f"–§–∞–π–ª: {os.path.basename(p)}"

# ---------- handlers ----------
def keep_file(file_obj):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ state –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è."""
    return file_obj, _display_name(file_obj)

def make_summary(file_obj):
    """–§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è + —Å—Ç–∞—Ç—É—Å."""
    path = _extract_path(file_obj)
    if not path:
        return gr.update(visible=False, value=None), "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ .xlsx"

    try:
        wb = build_summary_table(path)
        fd, out_path = tempfile.mkstemp(suffix=".xlsx")
        os.close(fd)
        wb.save(out_path)
        return gr.update(value=out_path, visible=True), "‚úÖ –ì–æ—Ç–æ–≤–æ! –ú–æ–∂–Ω–æ —Å–∫–∞—á–∏–≤–∞—Ç—å."
    except Exception as e:
        return gr.update(visible=False, value=None), f"‚ùå –û—à–∏–±–∫–∞: {e}"

# ---------- UI ----------
CSS = """
.gradio-container { max-width: 820px !important; margin: 0 auto !important; }
"""

with gr.Blocks(css=CSS, title="–°–≤–æ–¥ –ö–ü") as demo:
    gr.Markdown("## üìä –°–≤–æ–¥ –ö–ü\n–®–∞–≥ 1 ‚Äî **–≤—ã–±–µ—Ä–∏—Ç–µ Excel (.xlsx)**. –®–∞–≥ 2 ‚Äî **–Ω–∞–∂–º–∏—Ç–µ ¬´–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–¥¬ª**.")

    file_state = gr.State(None)

    with gr.Row():
        choose_btn = gr.UploadButton("üìÅ –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª (.xlsx)", file_types=[".xlsx"], file_count="single")
        run_btn = gr.Button("üöÄ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–¥", variant="primary")

    file_info = gr.Markdown("–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω", elem_id="fileinfo")
    download_btn = gr.DownloadButton("–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", visible=False)
    status = gr.Textbox(label="–°—Ç–∞—Ç—É—Å", interactive=False, lines=2)

    # 1) —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ state + –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è
    choose_btn.upload(fn=keep_file, inputs=choose_btn, outputs=[file_state, file_info])
    # 2) –ø–æ –∫–ª–∏–∫—É —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥ –∏ –≤—ã–¥–∞—ë–º –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    run_btn.click(fn=make_summary, inputs=file_state, outputs=[download_btn, status])

if __name__ == "__main__":
    demo.launch()
