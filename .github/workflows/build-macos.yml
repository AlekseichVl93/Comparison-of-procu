name: Build macOS App (PyInstaller)

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Create venv and install dependencies
        run: |
          python3 -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install pyinstaller

      - name: Locate gradio_client types.json and expose path
        run: |
          source venv/bin/activate
          # Найдём путь к types.json в установленном пакете gradio_client (если он есть)
          TYPES_JSON=$(python3 - <<'PY'
import gradio_client, os
p = os.path.join(os.path.dirname(gradio_client.__file__), "types.json")
print(p if os.path.exists(p) else "")
PY
)
          echo "TYPES_JSON=${TYPES_JSON}" >> $GITHUB_ENV
          echo "Found types.json at: ${TYPES_JSON}"

      - name: Build with PyInstaller (collect data & include types.json if found)
        shell: bash
        run: |
          source venv/bin/activate

          # По умолчанию добавляем collect-all для ключевых пакетов
          COLLECT_ARGS="--collect-all gradio --collect-all gradio_client --collect-all safehttpx --collect-all groovy --collect-all flask"

          ADD_DATA_ARG=""
          if [ -n "${TYPES_JSON}" ]; then
            echo "Will add explicit types.json: ${TYPES_JSON}"
            # Для macOS/Unix разделитель в --add-data = ':'
            ADD_DATA_ARG="--add-data \"${TYPES_JSON}:gradio_client\""
          fi

          # Сформируем команду
          if [ -n "$ADD_DATA_ARG" ]; then
            eval pyinstaller --onefile --name MyApp $COLLECT_ARGS $ADD_DATA_ARG app.py
          else
            eval pyinstaller --onefile --name MyApp $COLLECT_ARGS app.py
          fi

      - name: Show dist contents
        run: |
          echo "dist content:"
          ls -la dist || true

      - name: Archive and upload artifact
        run: |
          mkdir -p release
          cd dist || exit 0
          zip -r ../release/MyApp-macos.zip . || true
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: MyApp-macos
          path: release/MyApp-macos.zip
