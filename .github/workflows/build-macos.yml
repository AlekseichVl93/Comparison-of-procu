name: Build macOS App (PyInstaller)

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Create venv and install dependencies
        shell: bash
        run: |
          python3 -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install pyinstaller

      - name: Locate gradio_client types.json and expose path
        shell: bash
        run: |
          source venv/bin/activate
          # Находим абсолютный путь к types.json (если файл существует)
          TYPES_JSON=$(python3 -c "import importlib, os, sys
try:
  m = importlib.import_module('gradio_client')
  p = os.path.join(os.path.dirname(m.__file__), 'types.json')
  print(p if os.path.exists(p) else '')
except Exception:
  print('')")
          echo "TYPES_JSON=${TYPES_JSON}" >> $GITHUB_ENV
          echo "Found types.json at: ${TYPES_JSON}"

      - name: Build with PyInstaller (collect data & include types.json if found)
        shell: bash
        run: |
          source venv/bin/activate

          COLLECT_ARGS="--collect-all gradio --collect-all gradio_client --collect-all safehttpx --collect-all groovy --collect-all flask"

          if [ -n "${TYPES_JSON}" ]; then
            echo "Including explicit types.json: ${TYPES_JSON}"
            # для macOS/Linux разделитель в --add-data = ':'
            pyinstaller --onefile --name MyApp $COLLECT_ARGS --add-data "${TYPES_JSON}:gradio_client" app.py
          else
            echo "types.json not found; proceeding without explicit add-data"
            pyinstaller --onefile --name MyApp $COLLECT_ARGS app.py
          fi

      - name: Show dist contents
        shell: bash
        run: |
          echo "dist content:"
          ls -la dist || true

      - name: Archive and upload artifact
        shell: bash
        run: |
          mkdir -p release
          cd dist || exit 0
          zip -r ../release/MyApp-macos.zip . || true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: MyApp-macos
          path: release/MyApp-macos.zip
